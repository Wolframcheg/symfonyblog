<?php

namespace AppBundle\Repository;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{

    public function findAllQuery()
    {
        return $this->createQueryBuilder('post')
                ->orderBy('post.id', 'DESC')
                ->getQuery();
    }

    public function findByTagQuery($name)
    {
        return $this->createQueryBuilder('post')
            ->select('post, tag')
            ->leftJoin('post.tags', 'tag')
            ->andWhere('tag.name = :name')
            ->setParameter('name', $name)
            ->orderBy('post.id', 'DESC')
            ->getQuery()
            ;
    }

    public function findByQueryQuery($query)
    {
        return $this->createQueryBuilder('post')
            ->select('post, tag')
            ->leftJoin('post.tags', 'tag')
            ->orWhere('tag.name = :q')
            ->orWhere("post.pagetitle LIKE '%$query%'")
            ->orWhere("post.content LIKE '%$query%'")
            ->setParameter('q', $query)
            ->orderBy('post.id', 'DESC')
            ->getQuery()
            ;
    }

    /**
     * @param $slug
     * @return Post
     */
    public function findBySlug($slug)
    {
        return $this->createQueryBuilder('p')
            ->select('p, avg(c.rating) as avg_rating')
            ->leftJoin('p.tags', 't')
            ->Join('p.comments', 'c')
            ->andWhere('p.slug = :slug')
            ->setParameter('slug', $slug)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getPopularPosts($limit)
    {
        return $this->createQueryBuilder('post')
            ->select('post')
            ->select('post, avg(comments.rating) as avg_rating')
            ->groupBy('post')
            ->Join('post.comments', 'comments')
            ->orderBy('avg_rating', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
            ;
    }

    public function findAllByOwner($userId)
    {
        return $this->createQueryBuilder('post')
            ->select('post')
            ->andWhere('post.owner = :userId')
            ->setParameter('userId', $userId)
            ->orderBy('post.id', 'DESC')
            ->getQuery()
            ->getResult()
            ;
    }

}
